オープンソース PDF ライブラリの作成
―ライセンスフリーな高性能 PDF 出力エンジンの開発―

１．背景
  PDF（Portable  Document  Format）は、アドビシステムズによって開発されたファイル
フォーマットで、インターネット上での文書交換のためのファイル形式として広く普及してい
る。
  PDF は仕様が完全に公開されたファイル形式のため、PDF を出力するソフトウェアライ
ブラリは非常に多くのものが存在している。しかし、これらの多くは商用であり仕様分野が
限られている。オープンソースの実装も複数存在しているが Java や PHP 等特定の言語
向けのものしか存在していない。

２．目的
  本プロジェクトでは、開発者が数年前から開発をおこなっている C++による PDF 出力ラ
イブラリである Haru  Free  PDF  Library（以下 libharu）をベースにして、複数の開発言
語から利用可能な完成度の高い PDF 作成ライブラリを作成し、利用しやすいライセンスで
公開することで、よりユーザー層を広げることを目的としている。

３．開発の内容
  旧バージョンの libharu は、C++で実装されていたが、新バージョンでは、より移植性を
高めるため、C 言語で作り直している。このため、ソースコードはほぼ全面的に書き換えら
れている。

３−１  基本的な PDF 作成機能の開発
  PDF は、オブジェクトの集合体として構成されている。これらのオブジェクトを効率的に管
理し、メモリリークを防ぐために、オブジェクトの生成・破棄を管理するメカニズムを実装し
た。
  この機能により、エラーが発生した際にも、HPDF_Free()という関数を呼び出すことで、
確実にリソースの解放がおこなえるようになり、安全性を高めるとともに、全体的なコード
量を抑えることに成功した。
  また、公開関数と非公開関数を明確に分け、公開関数では引数の入念なチェックにより、
例えばユーザープログラムの不具合のより無効なポインタを渡されたようなケースでもセ
グメンテーション違反のような致命的なエラーが発生しにくいような実装をおこなった。具体
的には、各オブジェクト（実際は構造体）の先頭４バイトにシグネチャを埋め込み、この値が
正しいかをチェックしている。また、オブジェクトを破棄する際にこのシグネチャをゼロ埋め
することでダブルフリー問題への対策もおこなっている。

３−２  テキスト出力エンジンの開発
  歴史的な理由により、PDF のテキスト処理は非常に複雑なものになっている。これをうま
く処理するために、フォント定義体（以下 FontDef）と、エンコーダー（以下 Encoder）という
２つのクラスを作成し、これを組み合わせてフォントオブジェクト（以下 Font オブジェクト）を
作成する仕組みを作成した。
  フォントについては、PDF 組み込みの 14 書体以外に、外部の Type1 フォント、
TrueType フォントも使用可能であり、フォントファイルの埋め込みも実装した。

・  フォントを埋め込んだドキュメントの例

  エンコーディングについては、PDF 組み込みの３種類のエンコーディング以外に、
ISO8859-2〜16、Microsoft コードページ 1250〜1257、日中韓国語をサポートした。

・  各種欧米文字セットを使用した PDF ドキュメントの例

・  韓国語の PDF ドキュメントの例

  これらの機能以外にも、可変幅の２バイトフォントでも、文字幅を正しく算出する機能（海
外の製品では、２バイト文字は固定幅とみなしているものも多い）、文字を回転・変形させ
た場合でも、文字の出力位置を正しく追跡できるといった細かい機能も実装されている。

３−３  拡張機能の開発
  拡張機能として、イメージ出力、ファイル圧縮、暗号化等の機能を開発した。
  イメージ出力については、Jpeg および PNG イメージに加えて、別プログラムで作成した
PDF のイメージ格納形式のデータを直接インポートする機能を新たに作成した。
この機能を使用すると、イメージのフォーマット変換のオーバーヘッドを無くすことができる
ため、更なるパフォーマンスの向上を実現することが可能である。
また、Jpeg イメージについては、これまで Jpeglib を使用していたが、独自の Jpeg データ
解析ルーチンを自作し、Jpeglib を不要とした。
  暗号化については、これまでサポートしていた 40bit の低レベル暗号化に加え、40bit〜
128bit の可変キー長の高レベル暗号化をサポートした。
  また、暗号化のコードについても、流用していた BSD ライセンスのコードを全廃し、自作
コードとパブリック・ドメインのコードを組み合わせる形に変更した。
  これにより、使用している全てのコードが ZLIB/PNG ライセンスで統一されることになり、
使用・配布におけるランセンスへの考慮が楽になった。

３−４  他の開発言語のためのインターフェース機能
  C/C++以外の言語からの利用を可能にするため、共有ライブラリとしても使用できるよう
に実装をおこなった。共有ライブラリ化は、以前から要望のあった機能で、PowerBasic と
いう Basic 亜種のユーザが独自に DLL 化をおこない、配布をおこなっていたが、今回はこ
の成果物を取り込み、正式に共有ライブラリをサポートすることとした。
  共 有 ラ イ ブ ラ リ を 他 の 開 発 言 語 か ら 使 用 す る た め の サ ン プ ル 実 装 と し て 、
Delphi/FreePascal 用の IF を作成した。
  また、これとは別のサンプル実装として、Ruby 用の拡張ライブラリを作成した。
Ruby においては、現状 PDF を作成するための環境があまり整っておらず、特に日本語
PDF の作成については、貧弱な状態であるため、多くのユーザに利用されることが期待で
きる。

４．従来の技術（または機能）との相違
  libharu は革新的な技術を売りにしたソフトウェアでは無いが、①完成度の高さ、②実行
速度の速さ、③ライセンスフリーである  という３つの点で、他の競合製品に対して十分なア
ドバンテージを持っている。
  具体的には、①については機能的な部分だけでなく、高負荷が予想されるサーバ用途で
も十分実用に耐えるだけの信頼性を確保している。②については、商用製品にも引けを取
らないパフォーマンスを持ち、Java や PHP 等で作られた他のオープンソースの実装よりはる
かに高速である。また③に関しては、ZLIB／PNG ライセンスという制約の緩いライセンスを
採用しているため、商用・非商用に関わらず自由に使用可能である。

５．期待される効果
  オープンソースのソフトウェア、クローズドソースの商用製品のどちらにも制限無く使用で
きるという利点のため、旧バージョンの libharu は、PDF 出力エンジンとしてソフトウェアに
組み込まれた形で使用されるケースが多い。
  今回の成果で、さらなる高機能・高性能化と他の開発言語で使用するためのインターフェ
ースを用意したことでより多くのソフトウェアで使用されることを期待している。

６．普及（または活用）の見通し
  開発をおこなったソフトウェアを、2006 年 7 月 23 日に、libharu2 として Sourceforge.net
に公開をおこなった。
  共有ライブラリをサポートしたことで、対象ユーザが広がったため、ダウンロード数は、３
倍以上になっている。

過去１年間の月別ダウンロード数（2006 年 8 月分は 19 日までの途中経過）

今後も開発を継続的におこなうことで、さらなるユーザ数の増加を実現ずる予定である。

７．開発者名（所属）
  菅野  健（オリンパスシステムズ株式会社）

（参考）開発者ＵＲＬ
(cid:122)  Haru Free Library（libharu）プロジェクトサイト
http://sourceforge.net/projects/libharu/

